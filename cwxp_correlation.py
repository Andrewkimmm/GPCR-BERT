# -*- coding: utf-8 -*-
"""cwxp_correlation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZXBWZG18pRgSVTKO13pMdJpY9XlLhnNG
"""

import numpy as np

from google.colab import drive
drive.mount('/content/drive')

weights_and_sequences = np.load("/content/drive/MyDrive/PRotBert/data/final_CWxP_test_weight_pdb.npy", allow_pickle=True)

my_list = range(len(weights_and_sequences))
avoid = []
new_list = [x for i, x in enumerate(my_list) if i not in avoid]

most_cor1 = []
most_cor2 = []
most_cor3 = []
most_cor4 = []
most_cor5 = []


for j in new_list:
    values = list(weights_and_sequences[j].values())
    my_list = values[0]
    try:
      index = [i for i, s in enumerate(my_list) if s == 'W' and my_list[i-1]=='C' and my_list[i+2]=='P']
      raise IndexError
    except IndexError:
      pass
    print(f'Data number : {j}')
    print(f'pdb : {values[2]}')
    if type(index) == list:
      index = index[0]
    else:
      pass

    print(f'The Index of W of CWXP is {index}')
    #print(f'The Index of P of PXXG is {index}')
    #and my_list[i+3]=='Y'
     # index of X
    row = values[1][index+1] # row of X

    max_index1 = np.argmax(row)
    most_cor1.append(values[0][max_index1])
    print(f' Most Correlated sequence is {values[0][max_index1]} in {values[0][max_index1:max_index1+6]} at Index: {max_index1}. Attention Weight: {row[max_index1]}')
    row[max_index1] = 0

    max_index2 = np.argmax(row)
    most_cor2.append(values[0][max_index2])
    print(f' Second Most Correlated sequence is {values[0][max_index2]} in {values[0][max_index2:max_index2+6]} at Index: {max_index2}. Attention Weight: {row[max_index2]}')
    row[max_index2] = 0

    max_index3 = np.argmax(row)
    most_cor3.append(values[0][max_index3])
    print(f' Third Most Correlated sequence is {values[0][max_index3]} in {values[0][max_index3:max_index3+6]} at Index: {max_index3}. Attention Weight: {row[max_index3]}')
    row[max_index3] = 0

    max_index4 = np.argmax(row)
    most_cor4.append(values[0][max_index4])
    print(f' Fourth Most Correlated sequence is {values[0][max_index4]} in {values[0][max_index4:max_index4+6]} at Index: {max_index4}. Attention Weight: {row[max_index4]}')
    row[max_index4] = 0

    max_index5 = np.argmax(row)
    most_cor5.append(values[0][max_index5])
    print(f' Fifth Most Correlated sequence is {values[0][max_index5]} in {values[0][max_index5:max_index5+6]} at Index: {max_index5}. Attention Weight: {row[max_index5]}')

    start_index = min(max_index1, max_index2, max_index3, max_index4, max_index5)
    end_index = max(max_index1, max_index2, max_index3, max_index4, max_index5)
    print(f' The sequence between correlated residue is {values[0][start_index:end_index+1]}')